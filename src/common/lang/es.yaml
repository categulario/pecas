---
# Para todos los script
general: 
  pc_pandog: "pc-pandog"
  pc_analytics: "pc-analytics"
  pc_tegs: "pc-tegs"
  pc_creator: "pc-creator"
  pc_divider: "pc-divider"
  pc_notes: "pc-notes"
  pc_cites: "pc-cites"
  pc_index: "pc-index"
  pc_recreator: "pc-recreator"
  pc_changer: "pc-changer"
  fin: "¡Operación finalizada exitosamente!\n"
  sin_titulo: "Sin título"
  id_title: "pc-title"
  id_subtitle: "pc-subtitle"
  id_author: "pc-author"
  id_publisher: "pc-publisher"
  meta_data: "meta-data.yaml"
  marca: "--"
  marca_in_1: "("
  marca_in_2: ")"
  ignore: "--ignore--"
  note_content: "--note-content--"
  note: ["--note", "--"]
  descomprimiendo: "Descomprimiendo EPUB para iniciar su análisis…"
  analizando: ["Obteniendo información de ", "…"]
  epub_analisis: "epub-output"
  xhtml_analisis: "xhtml-output.xhtml"
  linea: "-------------------------------------"
  error_no_identificado: "No identificado."
  error_arg: "\nArgumentos insuficientes. Utiliza -h para ver la ayuda."
  error_arg2: "\nArgumentos inconsistentes. Utiliza -h para ver la ayuda."
  error_directorio: ["\nAl parecer el directorio «", "» no existe."]
  error_archivo: ["\nAl parecer el archivo «", "» no existe."]
  error_archivo2: ["\nEl archivo «", "» no tiene una extensión válida."]
  error_nombre: "\nYa existe una carpeta con el nombre indicado."
  error_opf: "\nArchivo OPF no encontrado."
  error_hash: "\nAl parecer la notación de objetos no tiene la estructura necesaria para convertirlo a HTML."

# pc-analytics
analytics: 
  h: "\nAnalytics analiza archivos EPUB, XML, XHTML o HTML para un mayor cuidado editorial y técnico.\n\nUso:\n  pc-analytics -f [archivo]\n\nParámetro necesario:\n  -f = [file] Archivo EPUB, XML, XHTML o HTML a analizar.\n\nParámetros opcionales:\n  --deep = Realiza un análisis profundo del archivo.\n  --json = Crea una salida del análisis en formato JSON.\n  --yaml = Crea una salida del análisis en formato YAML.\n  --rotate = Permite rotación aleatoria de las palabras en la nube de palbras de 30° a 150°.\n\nParámetros únicos:\n  -v = [version] Muestra la versión.\n  -h = [help] Muestra esta ayuda.\n\nEjemplo sencillo:\n  pc-analytics -f directorio/al/archivo.epub\n  Analiza el «archivo.epub» y crea una salida HTML con el análisis básico, incluyendo una nube de palabras y una gráfica de pastel.\n\nEjemplo con análisis profundo:\n  pc-analytics -f directorio/al/archivo.epub --deep\n  Semejante al ejemplo anterior pero además crea un análisis profundo, solo visible en JSON o YAML; se crea un JSON si no se especificó --json o --yaml.\n\nEjemplo con análisis profundo y rotación:\n  pc-analytics -f directorio/al/archivo.epub --deep --rotate\n  Semejante al ejemplo anterior pero además las palabras de la nube serán rotadas aleatoriamente, en lugar de permanecer horizontales.\n\nNota: ¿qué es un «análisis profundo»?, consúltese <https://github.com/NikaZhenya/pecas/tree/master/base-files/analytics>."
  extrayendo: ["Extrayendo todas las ", "palabras", "etiquetas", "…"]
  separando: ["Separando las ", "palabras", "cifras", " de todas las palabras…"]
  archivo_hunspell: "hunspell"
  analizando_hunspell: "Analizando palabras con hunspell…"
  analizando_linkchecker: "Analizando enlaces locales y remotos con linkchecker:"
  fin_linkchecker: "Análisis de linkchecker ha terminado."
  creando_analitica: ["Creando analítica para ", "palabras y cifras", "palabras", "cifras", "palabras sin categorizar", "palabras con versal inicial", "índice de frecuencia de uso", "índice de diversidad", "etiquetas", "posibles erratas", "validación de enlaces", "…"]
  creando_archivo: ["Creando archivo ", " con el nombre «", "»…", "JSON", "YAML", "HTML"]
  archivo_nombre: "analytics."
  grafica: ["Palabras","Cifras","Sin identificar"]
  advertencia_md: ["El archivo MD se convertirá a «", "» para poder ser analizado…"]
  advertencia_hunspell: "Hunspell no pudo ser localizado, no fue posible analizar por posibles erratas…"
  advertencia_linkchecker: "Linkchecker no pudo ser localizado, no fue posible analizar los enlaces…"
  advertencia_deep: "En el JSON o YAML estará el análisis profundo…"
  error_general: "\nNo fue posible analizar el archivo, revisa si su estructura es válida."

# pc-pandog
pandog: 
  h: "\nPandog utiliza el poder de Pandoc para convertir archivos con elementos adicionales si se convierten de HTML, XHTML, HTM o XML a MD o visceversa.\n\nUso:\n  pc-pandog -i [nombre del archivo de entrada] -o [nombre del archivo de salida]\n\nParámetros necesarios:\n  -i = [input] Nombre del archivo a convertir.\n  -o = [output] Nombre para el archivo que se creará; si no se indica alguna ruta, el archivo se creará en el mismo directorio del archivo de entrada.\n\nParámetros únicos:\n  -v = [version] Muestra la versión.\n  -h = [help] Muestra esta ayuda.\n\nEjemplo:\n  pc-pandog -i directorio/al/archivo.md -o archivo.xhtml\n  Crea un archivo XHTML a partir de «archivo.md» presente en «directorio/al»."
  iniciando: "Iniciando conversión con Pandoc…"
  modificando: "Modificando el archivo creado por Pandoc…"
  extrayendo: "Extrayendo datos para crear archivo…"
  error_ext: "\nNo se indicó el nombre de extensión para el archivo de salida."
  error_m: "\nNo fue posible modificar el archivo."
  error_json: "\nAl parecer el archivo JSON no cumple con la estructura requerida."

# pc-tegs
tegs: 
  h: "\nTegs utiliza el poder de Tesseract y de Ghostscript para crear archivos PDF con OCR o TXT a partir de imágenes TIFF, PNG o BMP.\n\nUso:\n  pc-tegs -d [directorio] -l [idioma] -o [nombre del archivo]\n\nParámetros necesarios:\n  -l = [language] Acrónimo del lenguaje a detectar. Es necesario instalar el lenguaje. Lista de acrónimos: <https://github.com/tesseract-ocr/tesseract/blob/master/doc/tesseract.1.asc#languages>\n  -o = [output] Nombre para el o los archivos que se crearán.\n\nParámetros opcionales:\n  -d = [directory] Directorio que contiene las imágenes.\n  -t = [text] Crea un TXT adicional al PDF creado.\n  -c = [compressed] Crea un PDF comprimido adcional al PDF creado.\n  -32 = [32 bits] SOLO WINDOWS, indica si la computadora es de 32 bits.\n\nParámetros únicos:\n  -v = [version] Muestra la versión.\n  -h = [help] Muestra esta ayuda.\n\nEjemplo sencillo:\n  pc-tegs -d directorio/de/las/imágenes -l spa -o prueba\n  Crea un archivo PDF con OCR en español y sin compresión a partir de las imágenes presentes en «directorio/de/las/imágenes».\n\nEjemplo con PDF comprimido:\n  pc-tegs -d directorio/de/las/imágenes -l spa -o prueba -c\n  Además del PDF con OCR, se crea otro PDF con compresión.\n\nEjemplo con archivo de texto:\n  pc-tegs -d directorio/de/las/imágenes -l spa -o prueba -t\n  Además del PDF con OCR, se crea un archivo de texto con el contenido de las imágenes.\n\nEjemplo con PDF comprimido y archivo de texto:\n  pc-tegs -d directorio/de/las/imágenes -l spa -o prueba -c -t\n  Además del PDF con OCR, se crea otro PDF con compresión y un archivo de texto."
  comprimido: "comprimido"
  procesando: ["Procesando "," de ","."]
  reconociendo: ["Reconociendo ","…"]
  extrayendo: ["Extrayendo texto de ","…"]
  uniendo_pdf: "Uniendo archivos pdf, esta operación puede durar varios minutos…"
  comprimiendo: ["Comprimiendo ",".pdf, esta operación puede durar varios minutos…"]
  uniendo_txt: "Uniendo archivos txt…"
  limpiando: "Limpiando directorio…"
  error: 
    te: "\nNo fue posible iniciar Tesseract."
    gs: "\nNo fue posible iniciar Ghostscript."
    
# pc-automata
automata:
  h: "\nAutomata automatiza el flujo de trabajo al poder usar todos los scripts para EPUB con una sola línea de comandos.\n\nUso para inicializar:\n  pc-automata --init\n  \nUso para automatizar:\n  pc-automata -f [archivo madre]\n\nParámetro necesario para la inicialización\n  --init = Crea la carpeta del proyecto y el archivo YAML necesarios para la automatización.\n\nParámetros opcionales para la inicialización\n  -o = [output] Nombre del proyecto.\n  --directory = Directorio donde se creará el proyecto.\n  \nParámetro necesario para la automatización\n  -f = [file] Archivo madre en MD, HTML, XHTML, XML o HTM.\n  \nParámetros opcionales para la autmatización\n  -c = [cover] Ruta a la imagen de portada que se desea incluir.\n  -d = [directory] Ruta al proyecto.\n  -i = [images] Ruta a la carpeta con las imágenes que se desean incluir.\n  -x = [xhtml] Ruta a la carpeta con los archivos XHTML que se desean incluir.\n  -n = [notes] Archivo con las notas en formato MD.\n  -s = [style sheet] Ruta al archivo CSS que se desea incluir.\n  -y = [yaml] Ruta al archivo con los metadatos para el EPUB.\n  -32 = [32 bits] SOLO WINDOWS, indica si la computadora es de 32 bits.\n  --no-pre = [preliminary] Evita la creación de contenidos preliminares (portada, portadilla y legal).\n  --index = Índice con el que ha de comenzar la numeración de los archivos divididos.\n  --inner = SOLO HTML, incluye las notas al pie al final del archivo.\n  --reset =  Resetea el contador de las notas al pie cada vez que se modifica un archivo.\n  --depth = Número entero que indica el nivel de profundidad de la tabla de contenidos.\n  --section = Divide el archivo madre cada <section>.\n  --rotate = Permite rotación aleatoria de las palabras en la nube de palabras de 30° a 150°.\n  --overwrite = Sobrescribe los archivos sin dar advertencia.\n  --no-analytics = Evita la creación de analítica.\n  --no-legacy = Evita la conversión de EPUB a una versión anterior.\n  --no-ace = Evita la verificación de ACE.\n\nParámetros únicos:\n  -v = [version] Muestra la versión.\n  -h = [help] Muestra esta ayuda.\n  \nEjemplo sencillo:\n  pc-automata -f archivo-madre.md\n  Crea un proyecto EPUB, un EPUB 3.0.1, un EPUB 3.0.0 y un MOBI a partir del «archivo-madre.md».\n  \nEjemplo complejo:\n  pc-automata -f archivo-madre.md -n notas.md -d automata/ -c portada.jpg -i imagenes/ -s styles.css -y automata/meta-datos.yaml --section --reset --inner\n  Crea un proyecto EPUB, un EPUB 3.0.1, un EPUB 3.0.0 y un MOBI a partir del «archivo-madre.md», las notas al pie de «notas.md» adentro de cada archivo y con reinicio de numeración, la portada «portada.jpg», las hojas de estilos «styles.css» y los metadatos «automata/meta-datos.yaml», divididos cada etiqueta <section> y en un proyecto de pc-automata llamado «automata»."
  nombre: "epub-automata"
  epub_nombre: "epub"
  logs: "logs"
  prefijo: ""
  init_archivo: ".automata_init"
  init_contenido: "Archivo para detectar que se trata de un proyecto de Automata, no borrar."
  log: "log-all.txt"
  creando: ["Creando carpeta del proyecto con el nombre «","»…"]
  eliminando: "Eliminando ficheros excepto los archivos YAML o TXT…"
  verificando: ["verificando «","»…"]
  convirtiendo: ["convirtiendo «","» a MOBI…"]
  epubcheck: ["Epubcheck","no pudo ser localizado, los EPUB no pueden ser verificados…"]
  ace: "Ace no pudo ser localizado, el EPUB no puede ser verificado…"
  kindlegen: "Kindlegen no pudo ser localizado, no fue posible crear un archivo MOBI…"
  pregunta: "La automatización solo permite la existencia de archivos YAML, ¿eliminar el resto de los archivos? [Y/n] "
  error_a: "\nProceso abortado por el usuario."
  error_e: ["\nAl parecer la capeta «","» no es un proyecto para Automata."]
  error_r: ["\nAlgo salió mal, eliminando archivos creados…","Proceso abortado satisfactoriamente, un log ha sido creado para su análisis."]

# pc-creator
creator: 
  h: "\nCreator crea un proyecto para EPUB con distintas opciones.\n\nUso:\n  pc-creator\n\nParámetros opcionales:\n  -d = [directory] Directorio donde se creará el proyecto.\n  -o = [output] Nombre del proyecto.\n  -s = [style sheet] Ruta al archivo CSS que se desea incluir.\n  -c = [cover] Ruta a la imagen de portada que se desea incluir.\n  -i = [images] Ruta a la carpeta con las imágenes que se desean incluir.\n  -x = [xhtml] Ruta a la carpeta con los archivos XHTML que se desean incluir.\n\nParámetros únicos:\n  -v = [version] Muestra la versión.\n  -h = [help] Muestra esta ayuda.\n  --no-pre = [preliminary] Evita la creación de contenidos preliminares (portada, portadilla y legal).\n\nEjemplo sencillo:\n  pc-creator\n  Crea un proyecto EPUB en el directorio actual y con el nombre «epub-creator».\n\nEjemplo en un directorio específico:\n  pc-creator -d directorio/deseado\n  Crea un proyecto EPUB en «directorio/deseado» y con el nombre «epub-creator».\n\nEjemplo en un directorio y nombre específicos:\n  pc-creator -d directorio/deseado -o proyecto_epub\n  Crea un proyecto EPUB en «directorio/deseado» y con el nombre «proyecto_epub».\n\nEjemplo en un directorio y nombre específicos, e incluyendo una hoja de estilo:\n  pc-creator -d directorio/deseado -o proyecto_epub -s ruta/al/archivo.css\n  Crea un proyecto EPUB como el ejemplo anterior, incluyendo la hoja de estilo «archivo.css» en lugar del CSS por defecto.\n\nEjemplo en un directorio y nombre específicos, e incluyendo una hoja de estilo y una portada:\n  pc-creator -d directorio/deseado -o proyecto_epub -s ruta/al/archivo.css -c ruta/a/la/portada.jpg\n  Crea un proyecto EPUB como el ejemplo anterior, incluyendo un XHTML que muestra la imagen de «portada.jpg».\n\nEjemplo en un directorio y nombre específicos, e incluyendo una hoja de estilo, una portada y varias imágenes:\n  pc-creator -d directorio/deseado -o proyecto_epub -s ruta/al/archivo.css -c ruta/a/la/portada.jpg -i ruta/al/directorio/con/imagenes\n  Crea un proyecto EPUB como el ejemplo anterior, incluyendo una copia de las imágenes presentes en «ruta/al/directorio/con/imagenes».\n  \nNota: también se generará «meta-data.yaml», que sirve para los metadatos del libro. Si se desconoce cómo usar el archivo, consúltese <https://github.com/NikaZhenya/pecas/tree/master/epub/others/yaml>. Si no se usará pc-recreator para generar el EPUB, este archivo es innecesario y puede eliminarse."
  epub_nombre: "epub-creator"
  aviso: "Se usa pc-recreator para completar este archivo."
  yaml: "---\n# Generales\ntitle: Sin título\nsubtitle: \nauthor:\n  - Apellido, Nombre\npublisher:\nsynopsis: \ncategory: \nversion: 1.0.0\ncover: \nnavigation: nav.xhtml\n\n# Tabla de contenidos\nno-toc: \nno-spine: \ncustom: \n\n# Si se quiere EPUB fijo\npx-width: \npx-height: \n\n# Fallbacks\nfallback: \n\n# WCAG:\nsummary: Este EPUB está optimizado para personas con deficiencias visuales; cualquier observación por favor póngase en contacto.\nmode:\n  - textual\n  - visual\nmode-sufficient:\n  - textual, visual\n  - textual\nfeature:\n  - structuralNavigation\n  - alternativeText\n  - resizeText\nhazard:\n  - none\ncontrol:\napi: ARIA"
  alt_portada: "Imagen de portada"
  xhtml_portada: "Portada"
  xhtml_portadilla: "Portadilla"
  xhtml_legal: "Legal"
  creando: ["Creando proyecto EPUB con el nombre «","»…"]
  error_meta: "\nYa existe un archivo para metadatos. Para corregirlo, elimina o renombra el archivo."

# pc-divider
divider: 
  h: "\nDivider separa un documento HTML cada <h1> o <section>.\n\nUso:\n  pc-divider -f [archivo a dividir]\n\nParámetro necesario:\n  -f = [file] Archivo HTML, XHTML, XML o HTM a dividir.\n\nParámetros opcionales:\n  -d = [directory] Directorio donde se pondrán los archivos creados.\n  -s = [style sheet] Ruta al archivo CSS que se desea vincular.\n  -i = [index] Índice con el que ha de comenzar la numeración del nombre de los archivos creados.\n  --section = Divide el documento cada <section>.\n\nParámetros únicos:\n  -v = [version] Muestra la versión.\n  -h = [help] Muestra esta ayuda.\n\nEjemplo sencillo:\n  pc-divider -f archivo/a/dividir.xhtml\n  Dividirá el archivo «dividir.xhtml» cada <h1>, poniendo los archivos creados en el directorio actual y empezando con el índice número 3.\n\nEjemplo en un directorio específico:\n  pc-divider -f archivo/a/dividir.xhtml -d directorio/deseado\n  Dividirá como el ejemplo anterior, poniendo los archivos creados en «directorio/deseado».\n\nEjemplo en un directorio e incluyendo una hoja de estilo:\n  pc-divider -f archivo/a/dividir.xhtml -d directorio/deseado -s ruta/al/archivo.css\n  Dividirá como el ejemplo anterior, vinculando la hoja de estilo «archivo.css» en cada archivo creado.\n\nEjemplo en un directorio e incluyendo una hoja de estilo y con otro índice:\n  pc-divider -f archivo/a/dividir.xhtml -d directorio/deseado -s ruta/al/archivo.css -i 1\n  Dividirá como el ejemplo anterior, iniciando la numeración de los archivos con el número 1.\n\nEjemplo en un directorio, dividido cada <section> e incluyendo una hoja de estilo y con otro índice:\n  pc-divider -f archivo/a/dividir.xhtml -d directorio/deseado -s ruta/al/archivo.css -i 1 --section\n  Semejante al ejemplo anterior, solo que la división es cada <section> en lugar de cada <h1>."
  dividiendo: "Dividiendo archivos…"
  creando: ["Creando ", "…"]
  error_f: "\nEl archivo no tiene una extensión válida (HTML, XHTML o HTM)."
  error_i: "\nSolo se permiten números enteros para la opción -i."

# pc-notes
notes:
  h: "\nNotes agrega de manera automatizada las notas al pie a archivos con sintaxis tipo HTML o documentos TeX.\n\nUso:\n  pc-notes -f [archivo con las notas]\n\nParámetro necesario:\n  -f = [file] Archivo con las notas en formato MD.\n\nParámetros opcionales:\n  -d = [directory] Directorio donde se encuentran los archivos para añadir las notas.\n  -s = [style sheet] SOLO HTML, Ruta al archivo CSS que se desea incluir.\n  --reset =  Resetea el contador cada vez que se modifica un archivo.\n  --inner = SOLO HTML, incluye las notas al pie al final del archivo.\n\nParámetros únicos:\n  -v = [version] Muestra la versión.\n  -h = [help] Muestra esta ayuda.\n\nEjemplo sencillo:\n  pc-recreator -f directorio/a/notas.md\n  Añade las notas presentes en «notas.md» a los archivos que se encuentren en el directorio actual.\n \nEjemplo con un directorio específico:\n  pc-recreator -f directorio/a/notas.md -d directorio/html/o/tex\n  Añade las notas presentes en «notas.md» a los archivos que se encuentren en «directorio/html/o/tex».\n  \nEjemplo con un directorio específico y con una hoja de estilo:\n  pc-recreator -f directorio/a/notas.md -d directorio/html -s ruta/al/archivo.css\n  Igual que el ejemplo anterior pero se añade una hoja de estilo; ojo: se ignora si hay «--inner».\n  \nEjemplo con un directorio específico y reseteo de la numeración:\n  pc-recreator -f directorio/a/notas.md -d directorio/html/o/tex --reset\n  Añade las notas presentes en «notas.md» a los archivos que se encuentren en «directorio/html/o/tex» y el contador inicia en 1 en cada archivo.\n  \nEjemplo con un directorio específico, reseteo de la numeración e incrustado en los archivos:\n  pc-recreator -f directorio/a/notas.md -d directorio/html --reset --inner\n  Igual que el ejemplo anterior pero el contenido de las notas se añaden al final de cada archivo."
  comparando: "Comparando cantidad de notas…"
  anadiendo: "Añadiendo referencias a los archivos…"
  oculto: ".pc-notes"
  archivo_notas: "9999-notes.xhtml"
  archivo_notas_titulo: "Notas"
  nota_sup: "n-note-sup"
  nota_hr: "n-note-hr"
  nota_a: "n-note-a"
  nota_p: "n-note-p"
  nota_p2: "n-note-p2"
  error_f: "\nHay archivos con lenguajes de marcado no compatibles, verifique que solo sean archivos TeX o con sintaxis tipo HTML."
  error_c: ["\nLa cantidad de notas al pie no coinciden.", " notas en «", "».", " notas en los archivos."]

# pc-recreator
recreator: 
  h: "\nRecreator recrea los archivos OPF, NCX y NAV así como crea o recrea el archivo EPUB.\n\nUso:\n  pc-recreator\n\nParámetros opcionales:\n  -d = [directory] Directorio del proyecto EPUB.\n  -y = [yaml] Archivo de los metadatos para el EPUB.\n  --depth = Número entero que indica el nivel de profundidad de la tabla de contenidos.\n  \nParámetros únicos:\n  -v = [version] Muestra la versión.\n  -h = [help] Muestra esta ayuda.\n  -32 = [32 bits] SOLO WINDOWS, indica si la computadora es de 32 bits.\n\nEjemplo sencillo:\n  pc-recreator\n  Crea un archivo EPUB buscando dentro del directorio actual los ficheros «epub-creator» y «meta-data.yaml».\n \nEjemplo con un proyecto EPUB específico:\n  pc-recreator -d directorio/para/epub\n  Crea un archivo EPUB de «directorio/para/epub» buscando dentro del directorio actual el fichero «meta-data.yaml».\n\nEjemplo con un proyecto EPUB y metadatos específicos:\n  pc-recreator -d directorio/para/epub -y archivo/meta-datos.yaml\n  Crea un archivo EPUB de «directorio/para/epub» usando el fichero «archivo/meta-datos.yaml».\n\nEjemplo con un proyecto EPUB, metadatos específicos y profundidad:\n  pc-recreator -d directorio/para/epub -y archivo/meta-datos.yaml --depth 4\n  Crea un archivo EPUB de «directorio/para/epub» usando el fichero «archivo/meta-datos.yaml» y con una tabla de contenidos con hasta encabezados «h4».\n  \nNota: se requiere un archivo YAML con una estructura específica para poder general el EPUB. Si se desconoce esta información, consúltese <https://github.com/NikaZhenya/pecas/tree/master/epub/others/yaml>."
  nuevo: " nuevo "
  recreando_opf: "Recreando OPF…"
  recreando_ncx: "Recreando NCX…"
  recreando_nav: "Recreando NAV…"
  recreando_fijo: ["EPUB fijo detectado de ",", agregando cambios a los XHTML…"]
  recreando_portadilla: "001-portadilla.xhtml"
  recreando_legal: "002-legal.xhtml"
  recreando_autoria: "Autoría"
  eliminando_viewports: "Eliminando viewports para evitar conflictos con el EPUB fluido…"
  eliminando_epub: "Eliminando EPUB previo…"
  creando_epub: ["Creando","EPUB en «","» con el nombre «","»…"]
  advertencia_depth: "Ignorando el parámetro --depth porque no es un número entero mayor a cero…"
  advertencia_fijo: ["Ignorando medidas para el EPUB fijo porque «","» no tiene valor…"]
  error_y: ["\nAl parecer el archivo «","» no tiene una sintaxis correcta."]
  error_e: ["\nAl parecer la capeta «","» no es un proyecto para EPUB."]
  error_a: ["\nNo se encontró un archivo ","."]
  error_m: "\nProblema con las medidas para el EPUB fijo."
  error_t: "\nEl metadato «title» en el archivo YAML es obligatorio."

# pc-changer
changer:
  h: "\nCambia versiones de EPUB entre 2.0.0, 2.0.1, 3.0.0 y 3.0.1.\n\nUso:\n  pc-changer\n\nParámetros necesarios:\n  -e = [epub] Archivo EPUB.\n  --version = Versión a convertir.\n\nParámetro opcional:\n  --standalone = No elimina el proyecto EPUB; ideal para hacer cambios manuales.\n  \nParámetros únicos:\n  -v = [version] Muestra la versión.\n  -h = [help] Muestra esta ayuda.\n\nEjemplo sencillo:\n  pc-changer -e archivo.epub --version 3.0.0\n  Convierte el «archivo.epub» a versión 3.0.0.\n \nEjemplo sin eliminar el proyecto EPUB:\n  pc-changer -e archivo.epub --version 3.0.0 --standalone\n  Convertirá como el ejemplo anterior, pero sin eliminar la carpeta de proyecto que sirvió para la conversión.\n  \nNota: cuando se pasa de versiones 2 a 3 es muy recomendado utilizar la opción «--standalone» por si es necesario hacer cambios manuales para evitar errores en la verificación."
  iniciando_conversion: ["Iniciando cambio de versión de «","» a ","…"]
  iniciando: "Iniciando cambios necesarios…"
  extrayendo: "Extrayendo metadatos…"
  incluyendo: ["Incluyendo metadatos en «","»…"]
  anadiendo: ["Añadiendo archivos de «","»…"]
  creando: ["Creando EPUB versión "," con el nombre de «","» en ","…"]
  advertencia_standalone: "Se recomienda la opción --standalone cuando se pasa de versiones 2 a 3."
  advertencia_metadata: "No fue posible recuperar todos los metadatos; para incluirlos se tendrá que modificar manualmente el archivo YAML y usar pc-recreator."
  error_version: ["\nLa versión «","» no está soportada."]
  error_version2: "\nSolo es posible actualizar a versiones 3. Las versiones 2 se consideran obsoletas; véase <http://idpf.org/epub/201>."
  error_version3: ["\nEl EPUB ya está en la versión ", ". No se ha realizado ningún cambio."]
  error_archivo: ["\nAl parecer el archivo «", "» tiene un error de sintaxis. Borrando todos los cambios…"]

# pc-doctor
doctor:
  h: "\nDoctor analiza el estado de Pecas y sus dependencias.\n\nUso:\n  pc-doctor\n  \nParámetros únicos:\n  -v = [version] Muestra la versión.\n  -h = [help] Muestra esta ayuda.\n  --update = Actualiza Pecas.\n  --restore = Restaura Pecas.\n  --install-dependencies = Instala dependencias de Pecas.\n\nEjemplo sencillo:\n  pc-doctor\n  Da un análisis del estado de Pecas y sus dependencias.\n \nEjemplo para actualizar:\n  pc-doctor --update\n  Actualiza Pecas.\n\nEjemplo para restaurar, actualizar e instalar dependencias:\n  pc-doctor --restore --update --install-dependencies\n  Restaura y actualiza Pecas, para después instalar sus dependencias."
  generales: "Generales:"
  dependencias: "Dependencias:"
  actualizando: "=> Actualizando Pecas…"
  restaurando: "=> Restaurando Pecas…"
  instalando: ["\n=> Instalando","con:"]
  instalando-fin: "=> Todos los comandos han sido ejecutados, para ver el estado usa:\n   pc-doctor"
  instalando-nan: "=> No hay dependencias por instalar."
  instalando-brew: "=> Instalando gestor de paquetes brew…"
  instalado: "instalado (versión desconocida)"
  no-instalado: "no instalado"
  falta: "=> Faltan algunas dependencias.\n   Para instalarlas usa:\n   pc-doctor --install-dependencies"
  pregunta: "Elige alguno de los siguientes gestores de paquetes:\n  0) Ninguno.\n  1) apt-get [Debian, Ubuntu, Linux Mint]\n  2) pacman [Arch Linux, Parabola]\n  3) apt [WSL Ubuntu]\n  4) brew [macOS]\n: "
  ninguno: "\nNingún gestor elegido."
  mayor: "\nNúmero inválido."
  advertencia: "\nSi alguna dependencia no puede ser instalada, usa directamente tu gestor de paquetes."
  error: "\nAlgo salió mal, usa directamente tu gestor de paquetes."
