#!/usr/bin/env ruby
# encoding: UTF-8
# coding: UTF-8

Encoding.default_internal = Encoding::UTF_8

# Funciones y módulos comunes a todas las herramientas
require File.dirname(__FILE__) + "/../../../otros/secundarios/general.rb"
require File.dirname(__FILE__) + "/../../../otros/secundarios/lang.rb"

# Variables
$divisor = '/'
$comillas = '\''
$version = ''

if OS.windows?
    $comillas = ''
end

# Obtiene los argumentos necesarios
if ARGF.argv.length < 1
    puts "\nUn argumento es necesario, la ruta al EPUB.".red.bold
    abort
elsif ARGF.argv.length == 2
    # Si el primer argumento no es 3 o 4, se aborta
    if ARGF.argv[0].to_i != 3 and ARGF.argv[0].to_i != 4
        puts "\nEl primer argumento tiene que ser la versión de EpubCheck a utilizar: 3 o 4.".red.bold
        abort
    end

    # Si el segundo argumento no tiene extensión de un EPUB, aborta.
    if File.extname(ARGF.argv[1]) != '.epub'
        puts "\nEl primer argumento tiene que ser la ruta al EPUB.".red.bold
        abort
    end
else
    puts "\nSolo se permiten dos argumentos, la versión de EpubCheck y la ruta al EPUB.".red.bold
    abort
end

$version = ARGF.argv[0].to_i
$epub = ARGF.argv[1]
$epub = arregloRuta $epub

# Obtiene la ruta absoluta
path = File.dirname(__FILE__)

# Regresa la ruta a /EPUB-Check
pathArray = path.split("/")
pathArray = pathArray[0..pathArray.length - 2]
pathArray = pathArray.join("/")

# Añade lo restante de la ruta al script
if $version == 3
    epubcheck = pathArray + "/3-0-1/epubcheck.jar"
else
    epubcheck = pathArray + "/4-0-2/epubcheck.jar"
end

# Llama a EpubCheck
system ("java -jar #{epubcheck} #{$epub}")
